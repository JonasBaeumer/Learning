# More optimized approach
# Timecomplexity: O(n) + O(m) = O(m + n) or O(n) if same size
# Spacecomplexity: O(k) or O(1) depending on alphabetsize, or fixed size of the alphabet. 
class Solution:
    def isAnagram(self, s: str, t: str) -> bool:

        anagram_dict = {}

        for char in s:
            if char in anagram_dict: 
                anagram_dict[char] += 1
            else:
                anagram_dict[char] = 1
        
        for char in t:
            if char in anagram_dict:
                anagram_dict[char] -= 1
                if anagram_dict[char] == 0:
                    del anagram_dict[char]
            else:
                anagram_dict[char] = 1
        
        if anagram_dict:
            return False
        return True

# Naive approach
# Timecomplexity: O(n log n) + O(n log n) + O(n) = O(n log n)
# Spacecomplexity: O(n) + O(n) = O(n)

class Solution:
    def isAnagram(self, s: str, t: str) -> bool:

        s_sorted = sorted(s)
        t_sorted = sorted(t)

        if len(t) != len(s):
            return False
        
        for index,char in enumerate(s_sorted):
            if s_sorted[index] != t_sorted[index]:
                return False
        
        return True
